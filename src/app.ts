import { WebSocketServer } from './server';
import { Logger } from './utils/logger';

// Configura√ß√£o do servidor
const PORT = process.env.PORT ? parseInt(process.env.PORT) : 8080;
const NODE_ENV = process.env.NODE_ENV || 'development';

// Configurar tratamento de sinais para desligamento gracioso
process.on('SIGINT', () => {
  Logger.info('Recebido sinal SIGINT, desligando servidor...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  Logger.info('Recebido sinal SIGTERM, desligando servidor...');
  process.exit(0);
});

// Tratamento de erros n√£o capturados
process.on('uncaughtException', (error) => {
  Logger.error('Erro n√£o capturado:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  Logger.error('Promise rejeitada n√£o tratada:', reason);
  process.exit(1);
});

// Fun√ß√£o principal
function main(): void {
  try {
    Logger.info('Iniciando WebSocket Payment Server...');
    Logger.info(`Ambiente: ${NODE_ENV}`);
    Logger.info(`Porta: ${PORT}`);

    // Criar e iniciar o servidor
    const server = new WebSocketServer(PORT);

    Logger.info('‚úÖ Servidor WebSocket iniciado com sucesso!');
    Logger.info('üì° Aguardando conex√µes...');
    Logger.info('');
    Logger.info('üìã Eventos suportados:');
    Logger.info('   ‚Ä¢ JOIN_ROOM - Dispositivo 1 entra na sala');
    Logger.info('   ‚Ä¢ ENTERED_SUMMARY - Usu√°rio entrou na tela de resumo');
    Logger.info('   ‚Ä¢ CLICKED_PROCEED - Usu√°rio clicou em "prosseguir"');
    Logger.info('   ‚Ä¢ PAYMENT_METHOD_CHANGED - M√©todo de pagamento alterado');
    Logger.info('   ‚Ä¢ DATA_FILLED - Dados preenchidos');
    Logger.info('   ‚Ä¢ CLICKED_PAY - Usu√°rio clicou em "pagar"');
    Logger.info('   ‚Ä¢ PAYMENT_SUCCESS - Pagamento bem-sucedido');
    Logger.info('   ‚Ä¢ PAYMENT_ERROR - Erro no pagamento');
    Logger.info('');
    Logger.info('üîó Para testar, conecte-se via WebSocket em:');
    Logger.info(`   ws://localhost:${PORT}`);
    Logger.info('');
    Logger.info('üåê Para verificar o status, acesse:');
    Logger.info(`   http://localhost:${PORT}`);

  } catch (error) {
    Logger.error('‚ùå Erro ao iniciar o servidor:', error);
    process.exit(1);
  }
}

// Executar fun√ß√£o principal
if (require.main === module) {
  main();
}

export { WebSocketServer };